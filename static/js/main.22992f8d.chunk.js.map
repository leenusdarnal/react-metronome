{"version":3,"sources":["Metronome.js","index.js"],"names":["Button","props","id","onClick","startStopSound","playing","TempoBpm","htmlFor","value","beatsPerMeasure","onChange","handleTempo","Slider","bpm","type","min","max","handleBpmChange","style","width","margin","Metronome","state","count","clickSound1","Audio","clickSound2","bind","playSound","updateInterval","this","play","console","log","setState","bpmSpeed","timer","setInterval","clearInterval","e","target","ddl","document","getElementById","className","Component","Destination","ReactDOM","render"],"mappings":"kOA0GA,SAASA,EAAOC,GAER,OACI,4BAAQC,GAAG,aAAaC,QAASF,EAAMG,gBAClCH,EAAMI,QAAQ,OAAQ,QAKvC,SAASC,EAASL,GAClB,OACI,yBAAKC,GAAG,sBACJ,2BAAOK,QAAQ,aAAf,iBACI,4BAAQL,GAAG,YAAYM,MAAOP,EAAMQ,gBACpCC,SAAUT,EAAMU,aACZ,4BAAQH,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,SAMhB,SAASI,EAAOX,GAKR,OACI,yBAAKC,GAAG,eACJ,6BAAMD,EAAMY,IAAZ,QACA,2BAAQC,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAClCR,MAAOP,EAAMY,IACbH,SAAUT,EAAMgB,gBAChBC,MAVK,CACTC,MAAM,QACNC,OAAO,UAcJC,M,kDA5IX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAM,CACPT,IAAI,GACJR,SAAQ,EACRkB,MAAM,EACNd,gBAAgB,GAEpB,EAAKe,YAAc,IAAIC,MAAM,8DAC7B,EAAKC,YAAa,IAAID,MAAM,8DAC5B,EAAKR,gBAAgB,EAAKA,gBAAgBU,KAArB,gBACrB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKvB,eAAe,EAAKA,eAAeuB,KAApB,gBACpB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKhB,YAAa,EAAKA,YAAYgB,KAAjB,gBAdJ,E,wDAkBXG,KAAKR,MAAMC,MAAQO,KAAKR,MAAMb,iBAC7BqB,KAAKN,YAAYO,OACjBC,QAAQC,IAAI,WAGZH,KAAKJ,YAAYK,OACjBC,QAAQC,IAAI,UAGhBH,KAAKI,SAAS,CACVX,OAAOO,KAAKR,MAAMC,MAAQ,GAAKO,KAAKR,MAAMb,oB,uCAO9C,IAAM0B,EAAW,IAAUL,KAAKR,MAAMT,IACtCiB,KAAKM,MAAQC,YAAYP,KAAKF,UAAWO,GACtCL,KAAKR,MAAMT,KAAO,GACjByB,cAAcR,KAAKM,S,uCAKpBN,KAAKR,MAAMjB,SACVyB,KAAKI,SAAS,CACV7B,SAAQ,EACRkB,MAAM,IAEVe,cAAcR,KAAKM,QAGnBN,KAAKI,SAAS,CACV7B,SAAQ,GACVyB,KAAKD,oB,sCAMCU,GAEhB,IAAM1B,EAAM0B,EAAEC,OAAOhC,MAClBsB,KAAKR,MAAMjB,SACViC,cAAcR,KAAKM,OACnBN,KAAKI,SAAS,CACVX,MAAM,EACNV,OACFiB,KAAKD,mBAGPC,KAAKI,SAAS,CACVrB,U,kCAMA0B,GAER,IAAME,EAAMC,SAASC,eAAe,aAAanC,MACjDsB,KAAKI,SAAS,CACVzB,gBAAgBgC,M,+BAMpB,OACI,yBAAKG,UAAU,aACX,yCACA,kBAAChC,EAAD,CAAQC,IAAKiB,KAAKR,MAAMT,IAAKI,gBAAiBa,KAAKb,kBACnD,kBAACjB,EAAD,CAAQK,QAASyB,KAAKR,MAAMjB,QAASD,eAAgB0B,KAAK1B,iBAC1D,kBAACE,EAAD,CAAUG,gBAAiBqB,KAAKR,MAAMb,gBAAiBE,YAAamB,KAAKnB,mB,GA9F7DkC,aCDlBC,EAAcJ,SAASC,eAAe,QAE5CI,IAASC,OAAO,kBAAC,EAAD,MAAaF,I","file":"static/js/main.22992f8d.chunk.js","sourcesContent":["import React,{Component}from \"react\"\nimport \"./Metronome.css\"\n\n\n\nclass Metronome extends Component {\n\n    constructor(props){\n        super(props)\n        this.state={\n            bpm:60,\n            playing:false,\n            count:0,\n            beatsPerMeasure:4\n        }\n        this.clickSound1 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n        this.clickSound2= new Audio(\"https://daveceddia.com/freebies/react-metronome/click2.wav\");\n        this.handleBpmChange=this.handleBpmChange.bind(this);\n        this.playSound = this.playSound.bind(this);\n        this.startStopSound=this.startStopSound.bind(this);\n        this.updateInterval = this.updateInterval.bind(this);\n        this.handleTempo =this.handleTempo.bind(this);\n    }\n\n    playSound(){\n        if(this.state.count % this.state.beatsPerMeasure){\n            this.clickSound1.play();\n            console.log(\"beat1\");\n        }\n        else{\n            this.clickSound2.play();\n            console.log(\"beat2\")\n        }\n        \n        this.setState({\n            count:(this.state.count + 1) % this.state.beatsPerMeasure\n        });\n    \n        \n        \n    }\n    updateInterval(){\n        const bpmSpeed = 60 *1000 /this.state.bpm;\n        this.timer = setInterval(this.playSound, bpmSpeed);\n        if(this.state.bpm <= 0){\n            clearInterval(this.timer);\n        }\n    }\n    startStopSound(){\n\n        if(this.state.playing){\n            this.setState({\n                playing:false,\n                count:0\n            })\n            clearInterval(this.timer);\n        }\n        else{\n            this.setState({\n                playing:true\n            },this.updateInterval());\n        }\n\n    }\n\n\n    handleBpmChange(e){\n    \n    const bpm = e.target.value;\n    if(this.state.playing){\n        clearInterval(this.timer);\n        this.setState({\n            count:0,\n            bpm\n        },this.updateInterval());\n    }\n    else{\n        this.setState({\n            bpm\n        });\n    }\n\n\n}\nhandleTempo(e){\n\n    const ddl = document.getElementById('beatSpeed').value;\n    this.setState({\n        beatsPerMeasure:ddl\n    })\n\n}\n\nrender(){\n    return(\n        <div className=\"container\">\n            <h1>Metronome</h1>\n            <Slider bpm={this.state.bpm} handleBpmChange={this.handleBpmChange}></Slider>\n            <Button playing={this.state.playing} startStopSound={this.startStopSound}></Button>\n            <TempoBpm beatsPerMeasure={this.state.beatsPerMeasure} handleTempo={this.handleTempo}></TempoBpm>\n        </div>\n    );\n}\n\n}\n\nfunction Button(props){\n\n        return(\n            <button id=\"playButton\" onClick={props.startStopSound}>\n                {props.playing?\"Stop\" :\"Play\"}\n            </button>\n        );\n} \n\nfunction TempoBpm(props){\nreturn(\n    <div id=\"beatSpeedContainer\">\n        <label htmlFor=\"beatSpeed\">Choose a Beat</label>\n            <select id=\"beatSpeed\" value={props.beatsPerMeasure}\n            onChange={props.handleTempo}>\n                <option value=\"1\">1/4</option>\n                <option value=\"2\">2/4</option>\n                <option value=\"3\">3/4</option>\n                <option value=\"4\">4/4</option>\n            </select>\n    </div>\n)\n\n}\nfunction Slider(props){\n        const styles={\n            width:\"260px\",\n            margin:\"5px\"\n        };\n        return(\n            <div id=\"sliderInput\">\n                <div>{props.bpm}BPM:</div>\n                <input  type=\"range\" min=\"30\" max=\"240\"\n                value={props.bpm}\n                onChange={props.handleBpmChange}\n                style={styles}\n                ></input>\n            </div>\n        )\n}\n\nexport default Metronome;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Metronome from \"./Metronome\"\n\nconst Destination = document.getElementById(\"root\");\n\nReactDOM.render(<Metronome/>,Destination);"],"sourceRoot":""}